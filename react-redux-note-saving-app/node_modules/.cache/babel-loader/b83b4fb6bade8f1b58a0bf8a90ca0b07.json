{"ast":null,"code":"import uuid from 'uuid';\nimport { createStore } from 'redux';\nvar ADD_NOTE = '[notes] Add a note to the application';\nvar ADD_ACTION = {\n  type: ADD_NOTE,\n  payload: {\n    id: uuid(),\n    title: \"Nice\",\n    note: \"Cool\"\n  }\n};\nvar initialState = {\n  notes: []\n};\n\nvar noteReducer = function noteReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_NOTE':\n      return Object.assign(state, {}, {\n        notes: state.notes.concat(action.payload)\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar store = createStore(noteReducer, initialState);\nexport { store, ADD_ACTION, ADD_NOTE };","map":{"version":3,"sources":["/home/oyewoas/Documents/Software Dev Learning/With Companies/LevelUp Academy/Software Dev Projects/github/Assignments/react-note-saving-app/src/reducers/noteReducer.js"],"names":["uuid","createStore","ADD_NOTE","ADD_ACTION","type","payload","id","title","note","initialState","notes","noteReducer","state","action","Object","assign","concat","store"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAIA,IAAMC,QAAQ,GAAG,uCAAjB;AAEA,IAAMC,UAAU,GAAG;AACfC,EAAAA,IAAI,EAAEF,QADS;AAEfG,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAEN,IAAI,EADD;AAEPO,IAAAA,KAAK,EAAC,MAFC;AAGPC,IAAAA,IAAI,EAAC;AAHE;AAFM,CAAnB;AASA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAClD,UAAQA,MAAM,CAACT,IAAf;AACI,SAAK,UAAL;AACE,aAAOU,MAAM,CAACC,MAAP,CACDH,KADC,EACM,EADN,EACU;AAACF,QAAAA,KAAK,EAAGE,KAAK,CAACF,KAAN,CAAYM,MAAZ,CAAmBH,MAAM,CAACR,OAA1B;AAAT,OADV,CAAP;;AAIF;AACE,aAAOO,KAAP;AAPN;AASH,CAVD;;AAcA,IAAMK,KAAK,GAAGhB,WAAW,CAACU,WAAD,EAAcF,YAAd,CAAzB;AAEA,SACIQ,KADJ,EAEId,UAFJ,EAGID,QAHJ","sourcesContent":["import uuid from 'uuid';\nimport { createStore } from 'redux';\n\n\n\nconst ADD_NOTE = '[notes] Add a note to the application';\n\nconst ADD_ACTION = {\n    type: ADD_NOTE,\n    payload: {\n      id: uuid(),\n      title:\"Nice\",\n      note:\"Cool\",\n    }\n};\n\nconst initialState = {\n    notes: [],\n};\n\nconst noteReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_NOTE':\n          return Object.assign(\n                state, {}, {notes : state.notes.concat(action.payload),}\n          );\n        \n        default:\n          return state;\n      }\n};\n\n\n\nconst store = createStore(noteReducer, initialState);\n\nexport {\n    store,\n    ADD_ACTION,\n    ADD_NOTE\n};"]},"metadata":{},"sourceType":"module"}